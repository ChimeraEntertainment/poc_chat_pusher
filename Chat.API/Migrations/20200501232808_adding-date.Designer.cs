// <auto-generated />
using System;
using Chat.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Chat.API.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    [Migration("20200501232808_adding-date")]
    partial class addingdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("Chat.API.Data.Channel", b =>
                {
                    b.Property<string>("ChannelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChannelAppId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(164);

                    b.HasKey("ChannelId");

                    b.HasIndex("ChannelAppId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Chat.API.Data.ChannelApp", b =>
                {
                    b.Property<string>("AppId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cluster")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(164);

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AppId");

                    b.ToTable("ChannelApps");
                });

            modelBuilder.Entity("Chat.API.Data.ChannelSubscriber", b =>
                {
                    b.Property<string>("ChannelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubscriberId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChannelId", "SubscriberId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("ChannelSubscribers");
                });

            modelBuilder.Entity("Chat.API.Data.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChannelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("When")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Chat.API.Data.Subscriber", b =>
                {
                    b.Property<string>("SubscriberId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChatName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SubscriberId");

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("Chat.API.Data.Channel", b =>
                {
                    b.HasOne("Chat.API.Data.ChannelApp", "ChannelApp")
                        .WithMany("Channels")
                        .HasForeignKey("ChannelAppId");
                });

            modelBuilder.Entity("Chat.API.Data.ChannelSubscriber", b =>
                {
                    b.HasOne("Chat.API.Data.Channel", "Channel")
                        .WithMany("ChannelSubscribers")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chat.API.Data.Subscriber", "Subscriber")
                        .WithMany("ChannelSubscribers")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Chat.API.Data.Message", b =>
                {
                    b.HasOne("Chat.API.Data.Channel", "Channel")
                        .WithMany("Messages")
                        .HasForeignKey("ChannelId");

                    b.HasOne("Chat.API.Data.Subscriber", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });
#pragma warning restore 612, 618
        }
    }
}
